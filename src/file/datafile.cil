;; SPDX-FileCopyrightText: Â© 2025 Dominick Grift <dominick.grift@defensec.nl>
;; SPDX-License-Identifier: Unlicense

(block data

  (filecon "/opt" dir file_context)
  (filecon "/opt/.*" any file_context)

  (filecon "/usr" dir file_context)
  (filecon "/usr/.*" any file_context)

  (filecon "/tmp" symlink file_context)

  (macro root_file_type_transition_file ((type ARG1))
         (call .root.file_type_transition
               (ARG1 file dir "opt"))
         (call .root.file_type_transition
               (ARG1 file dir "usr")))

  (blockinherit .file.data.template)

  (optional datafile_mount
            (call .mount.mountpoint.type (file)))

  (block search_file_pattern

    (macro type ((type ARG1))
	   (typeattributeset typeattr ARG1))

    (typeattribute typeattr)

    (call search_file_dirs (typeattr))

    (call .root.search_file_pattern.type (typeattr)))

  (block traverse_file_pattern

    (macro type ((type ARG1))
	   (typeattributeset typeattr ARG1))

    (typeattribute typeattr)

    (call read_file_lnk_files (typeattr))
    (call search_file_pattern.type (typeattr))))

(in file

    (block data

      (macro type ((type ARG1))
	     (typeattributeset typeattr ARG1))

      (blockinherit file.all_macro_template_dirs)
      (blockinherit file.all_macro_template_files)
      (blockinherit file.all_macro_template_lnk_files)

      (typeattribute typeattr)

      (call file.type (typeattr))

      (call .xattr.associate_fs_pattern.type (typeattr))

      (block base_template

	(blockabstract base_template)

	(blockinherit .file.base_template)

	(call .file.data.type (file)))

      (block template

	(blockabstract template)

	(blockinherit .file.data.base_template)
	(blockinherit .file.macro_template_dirs)
	(blockinherit .file.macro_template_files)
	(blockinherit .file.macro_template_lnk_files))))

(in file.unconfined
    (call .data.root_file_type_transition_file (typeattr))
) ;; namespace file.unconfined
